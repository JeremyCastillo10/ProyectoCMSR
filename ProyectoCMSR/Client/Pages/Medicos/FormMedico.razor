@page "/formMedico"
@using CurrieTechnologies.Razor.SweetAlert2
@using Newtonsoft.Json
@using ProyectoCMSR.Shared.DTOS
@inject SweetAlertService swal;
@inject HttpClient Http;
<MudContainer Class="mt-4">
    <MudPaper Class="p-6 mx-auto" Style="max-width: 800px;">
        <MudText Typo="Typo.h4" Class="mb-4">Formulario Creación de Médicos</MudText>

            <DataAnnotationsValidator />
            <MudGrid Spacing="3">
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="medico.Nombre" Label="Nombre" Variant="Variant.Outlined" FullWidth />
                    <ValidationMessage For="@(() => medico.Nombre)" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="medico.Descripcion" Label="Descripción" Variant="Variant.Outlined" FullWidth />
                    <ValidationMessage For="@(() => medico.Descripcion)" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <InputSelect @bind-Value="medico.EspecialidadId" class="form form-control">
                        <option value="">--Seleccione Especialidad--</option>
                        @foreach (var item in especialidades)
                        {
                            <option value="@item.Id">@item.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => medico.EspecialidadId)" />
                </MudItem>

                <MudItem xs="12">
                    <MudText Class="mb-2">Subir Imagen</MudText>
                    <InputFile OnChange="HandleFileSelected" />
                    <ValidationMessage For="@(() => medico.ImagenBase64)" />
                </MudItem>

            </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public Medicos_M medico { get; set; } = new Medicos_M();
    private string base64Image;
    private List<Especialidad_M> especialidades = new List<Especialidad_M>();


    protected override async Task OnInitializedAsync()
    {

        especialidades = await Http.GetFromJsonAsync<List<Especialidad_M>>("api/especialidad/getEspecialidad");

    }

    private async Task Guardar()
    {
        medico.ImagenBase64 = base64Image;
        var response = await Http.PostAsJsonAsync("api/medicos", medico);

        if (response.IsSuccessStatusCode)
        {
            alertGuarda();
        }
        else
        {
            alertNoGuarda();
        }
    }
    public async void alertGuarda()
    {
        var res = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Exito",
                Text = "Guardado con exito!!!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonText = "OK"

            });
    }
    public async void alertNoGuarda()
    {
        var res = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = "No Guarda!!!",
                Icon = SweetAlertIcon.Error,
                ConfirmButtonText = "OK"

            });
    }

    private async Task<Medicos_M> GetMedicoPorIdAsync(int id)
    {
        var response = await Http.GetAsync($"api/medicos/{id}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<Medicos_M>(content);
        }
        return null;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        base64Image = Convert.ToBase64String(buffer);
        medico.ImagenBase64 = base64Image;
    }


}
